from typing import TypedDict, List, Literal
from langchain_core.pydantic_v1 import BaseModel, Field
from langchain_core.messages import SystemMessage, HumanMessage, AIMessage
from langchain_openai import ChatOpenAI
from langgraph.graph import StateGraph, END
from src.utils import get_content
from src.constants import SYSTEM_MSG

class GraphInput(TypedDict):
    url: str
    tweet_type: Literal['Thread','Single tweet']

class GraphOutput(TypedDict):
    output: List

class State(TypedDict):
    url: str
    company_name: str
    content: str
    tweet_type: Literal['Thread','Single tweet']
    output: List

class LLMStructuredOutput(BaseModel):
    """Structuring the output of the LLM"""
    reply: List[str] = Field(description = "A list with the tweet/s generated by the LLM")


def extract_data(state: State):
    url = state["url"]
    content = get_content(url)
    return {"content": content}


def generate_content_for_twitter(state: State):

    messages = [
            (SystemMessage(content = SYSTEM_MSG.format(COMPANY_NAME=state['company_name']))),
            (HumanMessage(content = f"We need you to redact a {state['tweet_type']} based on the following information:\n{state['content']}"))
        ]
    model = ChatOpenAI(model_name="gpt-4o", temperature = 0)
    model = model.with_structured_output(LLMStructuredOutput)
    output = model.invoke(messages)
        
    return {"output": output.reply}


tweet_workflow = StateGraph(State,
                            input = GraphInput,
                            output = GraphOutput)
tweet_workflow.add_node(extract_data)
tweet_workflow.add_node(generate_content_for_twitter)

tweet_workflow.set_entry_point("extract_data")
tweet_workflow.add_edge("extract_data", "generate_content_for_twitter")
tweet_workflow.add_edge("generate_content_for_twitter", END)

tweet_graph = tweet_workflow.compile()
